
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fa8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00400fa8  00400fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000f74  20400000  00400fb0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000b0  20400f74  00401f24  00020f74  2**2
                  ALLOC
  4 .stack        00002004  20401024  00401fd4  00020f74  2**0
                  ALLOC
  5 .heap         00000200  20403028  00403fd8  00020f74  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020f74  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020fa2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000b4f6  00000000  00000000  00020ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001863  00000000  00000000  0002c4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000025d7  00000000  00000000  0002dd54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000568  00000000  00000000  0003032b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000650  00000000  00000000  00030893  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001c096  00000000  00000000  00030ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006928  00000000  00000000  0004cf79  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000892a0  00000000  00000000  000538a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000d44  00000000  00000000  000dcb44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	28 30 40 20 dd 04 40 00 d9 04 40 00 d9 04 40 00     (0@ ..@...@...@.
  400010:	d9 04 40 00 d9 04 40 00 d9 04 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	d9 04 40 00 d9 04 40 00 00 00 00 00 d9 04 40 00     ..@...@.......@.
  40003c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40004c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40005c:	d9 04 40 00 d9 04 40 00 00 00 00 00 01 03 40 00     ..@...@.......@.
  40006c:	15 03 40 00 29 03 40 00 d9 04 40 00 d9 04 40 00     ..@.).@...@...@.
  40007c:	d9 04 40 00 3d 03 40 00 51 03 40 00 d9 04 40 00     ..@.=.@.Q.@...@.
  40008c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40009c:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000ac:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000bc:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000cc:	d9 04 40 00 00 00 00 00 d9 04 40 00 00 00 00 00     ..@.......@.....
  4000dc:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000ec:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  4000fc:	d9 04 40 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ..@...@...@...@.
  40010c:	d9 04 40 00 d9 04 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 d9 04 40 00 d9 04 40 00 d9 04 40 00     ......@...@...@.
  40012c:	d9 04 40 00 d9 04 40 00 00 00 00 00 d9 04 40 00     ..@...@.......@.
  40013c:	d9 04 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400f74 	.word	0x20400f74
  40015c:	00000000 	.word	0x00000000
  400160:	00400fb0 	.word	0x00400fb0

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00400fb0 	.word	0x00400fb0
  4001a0:	20400f78 	.word	0x20400f78
  4001a4:	00400fb0 	.word	0x00400fb0
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	004006b1 	.word	0x004006b1
  4001f8:	00400401 	.word	0x00400401
  4001fc:	00400455 	.word	0x00400455
  400200:	00400465 	.word	0x00400465
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400475 	.word	0x00400475
  400210:	00400365 	.word	0x00400365
  400214:	0040039d 	.word	0x0040039d
  400218:	004005a5 	.word	0x004005a5

0040021c <pio_pull_up>:
  40021c:	b90a      	cbnz	r2, 400222 <pio_pull_up+0x6>
  40021e:	6601      	str	r1, [r0, #96]	; 0x60
  400220:	4770      	bx	lr
  400222:	6641      	str	r1, [r0, #100]	; 0x64
  400224:	4770      	bx	lr

00400226 <pio_set>:
  400226:	6301      	str	r1, [r0, #48]	; 0x30
  400228:	4770      	bx	lr

0040022a <pio_clear>:
  40022a:	6341      	str	r1, [r0, #52]	; 0x34
  40022c:	4770      	bx	lr

0040022e <pio_get>:
  40022e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400232:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400236:	d105      	bne.n	400244 <pio_get+0x16>
  400238:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40023a:	4213      	tst	r3, r2
  40023c:	bf14      	ite	ne
  40023e:	2001      	movne	r0, #1
  400240:	2000      	moveq	r0, #0
  400242:	4770      	bx	lr
  400244:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400246:	e7f8      	b.n	40023a <pio_get+0xc>

00400248 <pio_set_input>:
  400248:	6441      	str	r1, [r0, #68]	; 0x44
  40024a:	f012 0f01 	tst.w	r2, #1
  40024e:	d10d      	bne.n	40026c <pio_set_input+0x24>
  400250:	6601      	str	r1, [r0, #96]	; 0x60
  400252:	f012 0f0a 	tst.w	r2, #10
  400256:	d00b      	beq.n	400270 <pio_set_input+0x28>
  400258:	6201      	str	r1, [r0, #32]
  40025a:	f012 0f02 	tst.w	r2, #2
  40025e:	d109      	bne.n	400274 <pio_set_input+0x2c>
  400260:	f012 0f08 	tst.w	r2, #8
  400264:	d008      	beq.n	400278 <pio_set_input+0x30>
  400266:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40026a:	e005      	b.n	400278 <pio_set_input+0x30>
  40026c:	6641      	str	r1, [r0, #100]	; 0x64
  40026e:	e7f0      	b.n	400252 <pio_set_input+0xa>
  400270:	6241      	str	r1, [r0, #36]	; 0x24
  400272:	e7f2      	b.n	40025a <pio_set_input+0x12>
  400274:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  400278:	6141      	str	r1, [r0, #20]
  40027a:	6001      	str	r1, [r0, #0]
  40027c:	4770      	bx	lr

0040027e <pio_set_output>:
  40027e:	b410      	push	{r4}
  400280:	9c01      	ldr	r4, [sp, #4]
  400282:	6441      	str	r1, [r0, #68]	; 0x44
  400284:	b94c      	cbnz	r4, 40029a <pio_set_output+0x1c>
  400286:	6601      	str	r1, [r0, #96]	; 0x60
  400288:	b14b      	cbz	r3, 40029e <pio_set_output+0x20>
  40028a:	6501      	str	r1, [r0, #80]	; 0x50
  40028c:	b94a      	cbnz	r2, 4002a2 <pio_set_output+0x24>
  40028e:	6341      	str	r1, [r0, #52]	; 0x34
  400290:	6101      	str	r1, [r0, #16]
  400292:	6001      	str	r1, [r0, #0]
  400294:	f85d 4b04 	ldr.w	r4, [sp], #4
  400298:	4770      	bx	lr
  40029a:	6641      	str	r1, [r0, #100]	; 0x64
  40029c:	e7f4      	b.n	400288 <pio_set_output+0xa>
  40029e:	6541      	str	r1, [r0, #84]	; 0x54
  4002a0:	e7f4      	b.n	40028c <pio_set_output+0xe>
  4002a2:	6301      	str	r1, [r0, #48]	; 0x30
  4002a4:	e7f4      	b.n	400290 <pio_set_output+0x12>

004002a6 <pio_get_interrupt_status>:
  4002a6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  4002a8:	4770      	bx	lr

004002aa <pio_get_interrupt_mask>:
  4002aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
  4002ac:	4770      	bx	lr
	...

004002b0 <pio_handler_process>:
  4002b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002b4:	4604      	mov	r4, r0
  4002b6:	4688      	mov	r8, r1
  4002b8:	4b0e      	ldr	r3, [pc, #56]	; (4002f4 <pio_handler_process+0x44>)
  4002ba:	4798      	blx	r3
  4002bc:	4605      	mov	r5, r0
  4002be:	4620      	mov	r0, r4
  4002c0:	4b0d      	ldr	r3, [pc, #52]	; (4002f8 <pio_handler_process+0x48>)
  4002c2:	4798      	blx	r3
  4002c4:	4005      	ands	r5, r0
  4002c6:	d013      	beq.n	4002f0 <pio_handler_process+0x40>
  4002c8:	4c0c      	ldr	r4, [pc, #48]	; (4002fc <pio_handler_process+0x4c>)
  4002ca:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4002ce:	e003      	b.n	4002d8 <pio_handler_process+0x28>
  4002d0:	42b4      	cmp	r4, r6
  4002d2:	d00d      	beq.n	4002f0 <pio_handler_process+0x40>
  4002d4:	3410      	adds	r4, #16
  4002d6:	b15d      	cbz	r5, 4002f0 <pio_handler_process+0x40>
  4002d8:	6820      	ldr	r0, [r4, #0]
  4002da:	4540      	cmp	r0, r8
  4002dc:	d1f8      	bne.n	4002d0 <pio_handler_process+0x20>
  4002de:	6861      	ldr	r1, [r4, #4]
  4002e0:	4229      	tst	r1, r5
  4002e2:	d0f5      	beq.n	4002d0 <pio_handler_process+0x20>
  4002e4:	68e3      	ldr	r3, [r4, #12]
  4002e6:	4798      	blx	r3
  4002e8:	6863      	ldr	r3, [r4, #4]
  4002ea:	ea25 0503 	bic.w	r5, r5, r3
  4002ee:	e7ef      	b.n	4002d0 <pio_handler_process+0x20>
  4002f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002f4:	004002a7 	.word	0x004002a7
  4002f8:	004002ab 	.word	0x004002ab
  4002fc:	20400f90 	.word	0x20400f90

00400300 <PIOA_Handler>:
  400300:	b508      	push	{r3, lr}
  400302:	210a      	movs	r1, #10
  400304:	4801      	ldr	r0, [pc, #4]	; (40030c <PIOA_Handler+0xc>)
  400306:	4b02      	ldr	r3, [pc, #8]	; (400310 <PIOA_Handler+0x10>)
  400308:	4798      	blx	r3
  40030a:	bd08      	pop	{r3, pc}
  40030c:	400e0e00 	.word	0x400e0e00
  400310:	004002b1 	.word	0x004002b1

00400314 <PIOB_Handler>:
  400314:	b508      	push	{r3, lr}
  400316:	210b      	movs	r1, #11
  400318:	4801      	ldr	r0, [pc, #4]	; (400320 <PIOB_Handler+0xc>)
  40031a:	4b02      	ldr	r3, [pc, #8]	; (400324 <PIOB_Handler+0x10>)
  40031c:	4798      	blx	r3
  40031e:	bd08      	pop	{r3, pc}
  400320:	400e1000 	.word	0x400e1000
  400324:	004002b1 	.word	0x004002b1

00400328 <PIOC_Handler>:
  400328:	b508      	push	{r3, lr}
  40032a:	210c      	movs	r1, #12
  40032c:	4801      	ldr	r0, [pc, #4]	; (400334 <PIOC_Handler+0xc>)
  40032e:	4b02      	ldr	r3, [pc, #8]	; (400338 <PIOC_Handler+0x10>)
  400330:	4798      	blx	r3
  400332:	bd08      	pop	{r3, pc}
  400334:	400e1200 	.word	0x400e1200
  400338:	004002b1 	.word	0x004002b1

0040033c <PIOD_Handler>:
  40033c:	b508      	push	{r3, lr}
  40033e:	2110      	movs	r1, #16
  400340:	4801      	ldr	r0, [pc, #4]	; (400348 <PIOD_Handler+0xc>)
  400342:	4b02      	ldr	r3, [pc, #8]	; (40034c <PIOD_Handler+0x10>)
  400344:	4798      	blx	r3
  400346:	bd08      	pop	{r3, pc}
  400348:	400e1400 	.word	0x400e1400
  40034c:	004002b1 	.word	0x004002b1

00400350 <PIOE_Handler>:
  400350:	b508      	push	{r3, lr}
  400352:	2111      	movs	r1, #17
  400354:	4801      	ldr	r0, [pc, #4]	; (40035c <PIOE_Handler+0xc>)
  400356:	4b02      	ldr	r3, [pc, #8]	; (400360 <PIOE_Handler+0x10>)
  400358:	4798      	blx	r3
  40035a:	bd08      	pop	{r3, pc}
  40035c:	400e1600 	.word	0x400e1600
  400360:	004002b1 	.word	0x004002b1

00400364 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400364:	2803      	cmp	r0, #3
  400366:	d011      	beq.n	40038c <pmc_mck_set_division+0x28>
  400368:	2804      	cmp	r0, #4
  40036a:	d012      	beq.n	400392 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  40036c:	2802      	cmp	r0, #2
  40036e:	bf0c      	ite	eq
  400370:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400374:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400376:	4a08      	ldr	r2, [pc, #32]	; (400398 <pmc_mck_set_division+0x34>)
  400378:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40037a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40037e:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400380:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400382:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400384:	f013 0f08 	tst.w	r3, #8
  400388:	d0fb      	beq.n	400382 <pmc_mck_set_division+0x1e>
}
  40038a:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  40038c:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400390:	e7f1      	b.n	400376 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400392:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400396:	e7ee      	b.n	400376 <pmc_mck_set_division+0x12>
  400398:	400e0600 	.word	0x400e0600

0040039c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  40039c:	4a17      	ldr	r2, [pc, #92]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  40039e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4003a4:	4318      	orrs	r0, r3
  4003a6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003aa:	f013 0f08 	tst.w	r3, #8
  4003ae:	d10a      	bne.n	4003c6 <pmc_switch_mck_to_pllack+0x2a>
  4003b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4003b4:	4911      	ldr	r1, [pc, #68]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  4003b6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003b8:	f012 0f08 	tst.w	r2, #8
  4003bc:	d103      	bne.n	4003c6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003be:	3b01      	subs	r3, #1
  4003c0:	d1f9      	bne.n	4003b6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4003c2:	2001      	movs	r0, #1
  4003c4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4003c6:	4a0d      	ldr	r2, [pc, #52]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  4003c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4003ca:	f023 0303 	bic.w	r3, r3, #3
  4003ce:	f043 0302 	orr.w	r3, r3, #2
  4003d2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4003d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4003d6:	f013 0f08 	tst.w	r3, #8
  4003da:	d10a      	bne.n	4003f2 <pmc_switch_mck_to_pllack+0x56>
  4003dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4003e0:	4906      	ldr	r1, [pc, #24]	; (4003fc <pmc_switch_mck_to_pllack+0x60>)
  4003e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4003e4:	f012 0f08 	tst.w	r2, #8
  4003e8:	d105      	bne.n	4003f6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4003ea:	3b01      	subs	r3, #1
  4003ec:	d1f9      	bne.n	4003e2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4003ee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4003f0:	4770      	bx	lr
	return 0;
  4003f2:	2000      	movs	r0, #0
  4003f4:	4770      	bx	lr
  4003f6:	2000      	movs	r0, #0
  4003f8:	4770      	bx	lr
  4003fa:	bf00      	nop
  4003fc:	400e0600 	.word	0x400e0600

00400400 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  400400:	b9a0      	cbnz	r0, 40042c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400402:	480e      	ldr	r0, [pc, #56]	; (40043c <pmc_switch_mainck_to_xtal+0x3c>)
  400404:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400406:	0209      	lsls	r1, r1, #8
  400408:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40040a:	4a0d      	ldr	r2, [pc, #52]	; (400440 <pmc_switch_mainck_to_xtal+0x40>)
  40040c:	401a      	ands	r2, r3
  40040e:	4b0d      	ldr	r3, [pc, #52]	; (400444 <pmc_switch_mainck_to_xtal+0x44>)
  400410:	4313      	orrs	r3, r2
  400412:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400414:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400416:	4602      	mov	r2, r0
  400418:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40041a:	f013 0f01 	tst.w	r3, #1
  40041e:	d0fb      	beq.n	400418 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400420:	4a06      	ldr	r2, [pc, #24]	; (40043c <pmc_switch_mainck_to_xtal+0x3c>)
  400422:	6a11      	ldr	r1, [r2, #32]
  400424:	4b08      	ldr	r3, [pc, #32]	; (400448 <pmc_switch_mainck_to_xtal+0x48>)
  400426:	430b      	orrs	r3, r1
  400428:	6213      	str	r3, [r2, #32]
  40042a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40042c:	4903      	ldr	r1, [pc, #12]	; (40043c <pmc_switch_mainck_to_xtal+0x3c>)
  40042e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  400430:	4a06      	ldr	r2, [pc, #24]	; (40044c <pmc_switch_mainck_to_xtal+0x4c>)
  400432:	401a      	ands	r2, r3
  400434:	4b06      	ldr	r3, [pc, #24]	; (400450 <pmc_switch_mainck_to_xtal+0x50>)
  400436:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400438:	620b      	str	r3, [r1, #32]
  40043a:	4770      	bx	lr
  40043c:	400e0600 	.word	0x400e0600
  400440:	ffc8fffc 	.word	0xffc8fffc
  400444:	00370001 	.word	0x00370001
  400448:	01370000 	.word	0x01370000
  40044c:	fec8fffc 	.word	0xfec8fffc
  400450:	01370002 	.word	0x01370002

00400454 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400454:	4b02      	ldr	r3, [pc, #8]	; (400460 <pmc_osc_is_ready_mainck+0xc>)
  400456:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400458:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  40045c:	4770      	bx	lr
  40045e:	bf00      	nop
  400460:	400e0600 	.word	0x400e0600

00400464 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400464:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400468:	4b01      	ldr	r3, [pc, #4]	; (400470 <pmc_disable_pllack+0xc>)
  40046a:	629a      	str	r2, [r3, #40]	; 0x28
  40046c:	4770      	bx	lr
  40046e:	bf00      	nop
  400470:	400e0600 	.word	0x400e0600

00400474 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400474:	4b02      	ldr	r3, [pc, #8]	; (400480 <pmc_is_locked_pllack+0xc>)
  400476:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400478:	f000 0002 	and.w	r0, r0, #2
  40047c:	4770      	bx	lr
  40047e:	bf00      	nop
  400480:	400e0600 	.word	0x400e0600

00400484 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400484:	283f      	cmp	r0, #63	; 0x3f
  400486:	d81e      	bhi.n	4004c6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  400488:	281f      	cmp	r0, #31
  40048a:	d80c      	bhi.n	4004a6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  40048c:	4b11      	ldr	r3, [pc, #68]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  40048e:	699a      	ldr	r2, [r3, #24]
  400490:	2301      	movs	r3, #1
  400492:	4083      	lsls	r3, r0
  400494:	4393      	bics	r3, r2
  400496:	d018      	beq.n	4004ca <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  400498:	2301      	movs	r3, #1
  40049a:	fa03 f000 	lsl.w	r0, r3, r0
  40049e:	4b0d      	ldr	r3, [pc, #52]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  4004a0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4004a2:	2000      	movs	r0, #0
  4004a4:	4770      	bx	lr
		ul_id -= 32;
  4004a6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4004a8:	4b0a      	ldr	r3, [pc, #40]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  4004aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4004ae:	2301      	movs	r3, #1
  4004b0:	4083      	lsls	r3, r0
  4004b2:	4393      	bics	r3, r2
  4004b4:	d00b      	beq.n	4004ce <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4004b6:	2301      	movs	r3, #1
  4004b8:	fa03 f000 	lsl.w	r0, r3, r0
  4004bc:	4b05      	ldr	r3, [pc, #20]	; (4004d4 <pmc_enable_periph_clk+0x50>)
  4004be:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4004c2:	2000      	movs	r0, #0
  4004c4:	4770      	bx	lr
		return 1;
  4004c6:	2001      	movs	r0, #1
  4004c8:	4770      	bx	lr
	return 0;
  4004ca:	2000      	movs	r0, #0
  4004cc:	4770      	bx	lr
  4004ce:	2000      	movs	r0, #0
}
  4004d0:	4770      	bx	lr
  4004d2:	bf00      	nop
  4004d4:	400e0600 	.word	0x400e0600

004004d8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4004d8:	e7fe      	b.n	4004d8 <Dummy_Handler>
	...

004004dc <Reset_Handler>:
{
  4004dc:	b500      	push	{lr}
  4004de:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4004e0:	4b25      	ldr	r3, [pc, #148]	; (400578 <Reset_Handler+0x9c>)
  4004e2:	4a26      	ldr	r2, [pc, #152]	; (40057c <Reset_Handler+0xa0>)
  4004e4:	429a      	cmp	r2, r3
  4004e6:	d010      	beq.n	40050a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4004e8:	4b25      	ldr	r3, [pc, #148]	; (400580 <Reset_Handler+0xa4>)
  4004ea:	4a23      	ldr	r2, [pc, #140]	; (400578 <Reset_Handler+0x9c>)
  4004ec:	429a      	cmp	r2, r3
  4004ee:	d20c      	bcs.n	40050a <Reset_Handler+0x2e>
  4004f0:	3b01      	subs	r3, #1
  4004f2:	1a9b      	subs	r3, r3, r2
  4004f4:	f023 0303 	bic.w	r3, r3, #3
  4004f8:	3304      	adds	r3, #4
  4004fa:	4413      	add	r3, r2
  4004fc:	491f      	ldr	r1, [pc, #124]	; (40057c <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4004fe:	f851 0b04 	ldr.w	r0, [r1], #4
  400502:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400506:	429a      	cmp	r2, r3
  400508:	d1f9      	bne.n	4004fe <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40050a:	4b1e      	ldr	r3, [pc, #120]	; (400584 <Reset_Handler+0xa8>)
  40050c:	4a1e      	ldr	r2, [pc, #120]	; (400588 <Reset_Handler+0xac>)
  40050e:	429a      	cmp	r2, r3
  400510:	d20a      	bcs.n	400528 <Reset_Handler+0x4c>
  400512:	3b01      	subs	r3, #1
  400514:	1a9b      	subs	r3, r3, r2
  400516:	f023 0303 	bic.w	r3, r3, #3
  40051a:	3304      	adds	r3, #4
  40051c:	4413      	add	r3, r2
                *pDest++ = 0;
  40051e:	2100      	movs	r1, #0
  400520:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400524:	4293      	cmp	r3, r2
  400526:	d1fb      	bne.n	400520 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400528:	4a18      	ldr	r2, [pc, #96]	; (40058c <Reset_Handler+0xb0>)
  40052a:	4b19      	ldr	r3, [pc, #100]	; (400590 <Reset_Handler+0xb4>)
  40052c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400530:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400532:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400536:	fab3 f383 	clz	r3, r3
  40053a:	095b      	lsrs	r3, r3, #5
  40053c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40053e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  400540:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400544:	2200      	movs	r2, #0
  400546:	4b13      	ldr	r3, [pc, #76]	; (400594 <Reset_Handler+0xb8>)
  400548:	701a      	strb	r2, [r3, #0]
	return flags;
  40054a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  40054c:	4a12      	ldr	r2, [pc, #72]	; (400598 <Reset_Handler+0xbc>)
  40054e:	6813      	ldr	r3, [r2, #0]
  400550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400554:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400556:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40055a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40055e:	b129      	cbz	r1, 40056c <Reset_Handler+0x90>
		cpu_irq_enable();
  400560:	2201      	movs	r2, #1
  400562:	4b0c      	ldr	r3, [pc, #48]	; (400594 <Reset_Handler+0xb8>)
  400564:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400566:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40056a:	b662      	cpsie	i
        __libc_init_array();
  40056c:	4b0b      	ldr	r3, [pc, #44]	; (40059c <Reset_Handler+0xc0>)
  40056e:	4798      	blx	r3
        main();
  400570:	4b0b      	ldr	r3, [pc, #44]	; (4005a0 <Reset_Handler+0xc4>)
  400572:	4798      	blx	r3
  400574:	e7fe      	b.n	400574 <Reset_Handler+0x98>
  400576:	bf00      	nop
  400578:	20400000 	.word	0x20400000
  40057c:	00400fb0 	.word	0x00400fb0
  400580:	20400f74 	.word	0x20400f74
  400584:	20401024 	.word	0x20401024
  400588:	20400f74 	.word	0x20400f74
  40058c:	e000ed00 	.word	0xe000ed00
  400590:	00400000 	.word	0x00400000
  400594:	2040000a 	.word	0x2040000a
  400598:	e000ed88 	.word	0xe000ed88
  40059c:	00400e11 	.word	0x00400e11
  4005a0:	00400971 	.word	0x00400971

004005a4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4005a4:	4b3b      	ldr	r3, [pc, #236]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005a8:	f003 0303 	and.w	r3, r3, #3
  4005ac:	2b01      	cmp	r3, #1
  4005ae:	d01d      	beq.n	4005ec <SystemCoreClockUpdate+0x48>
  4005b0:	b183      	cbz	r3, 4005d4 <SystemCoreClockUpdate+0x30>
  4005b2:	2b02      	cmp	r3, #2
  4005b4:	d036      	beq.n	400624 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4005b6:	4b37      	ldr	r3, [pc, #220]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4005ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4005be:	2b70      	cmp	r3, #112	; 0x70
  4005c0:	d05f      	beq.n	400682 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4005c2:	4b34      	ldr	r3, [pc, #208]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4005c6:	4934      	ldr	r1, [pc, #208]	; (400698 <SystemCoreClockUpdate+0xf4>)
  4005c8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4005cc:	680b      	ldr	r3, [r1, #0]
  4005ce:	40d3      	lsrs	r3, r2
  4005d0:	600b      	str	r3, [r1, #0]
  4005d2:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4005d4:	4b31      	ldr	r3, [pc, #196]	; (40069c <SystemCoreClockUpdate+0xf8>)
  4005d6:	695b      	ldr	r3, [r3, #20]
  4005d8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4005dc:	bf14      	ite	ne
  4005de:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4005e2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4005e6:	4b2c      	ldr	r3, [pc, #176]	; (400698 <SystemCoreClockUpdate+0xf4>)
  4005e8:	601a      	str	r2, [r3, #0]
  4005ea:	e7e4      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4005ec:	4b29      	ldr	r3, [pc, #164]	; (400694 <SystemCoreClockUpdate+0xf0>)
  4005ee:	6a1b      	ldr	r3, [r3, #32]
  4005f0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4005f4:	d003      	beq.n	4005fe <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4005f6:	4a2a      	ldr	r2, [pc, #168]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  4005f8:	4b27      	ldr	r3, [pc, #156]	; (400698 <SystemCoreClockUpdate+0xf4>)
  4005fa:	601a      	str	r2, [r3, #0]
  4005fc:	e7db      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4005fe:	4a29      	ldr	r2, [pc, #164]	; (4006a4 <SystemCoreClockUpdate+0x100>)
  400600:	4b25      	ldr	r3, [pc, #148]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400602:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400604:	4b23      	ldr	r3, [pc, #140]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400606:	6a1b      	ldr	r3, [r3, #32]
  400608:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40060c:	2b10      	cmp	r3, #16
  40060e:	d005      	beq.n	40061c <SystemCoreClockUpdate+0x78>
  400610:	2b20      	cmp	r3, #32
  400612:	d1d0      	bne.n	4005b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400614:	4a22      	ldr	r2, [pc, #136]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  400616:	4b20      	ldr	r3, [pc, #128]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400618:	601a      	str	r2, [r3, #0]
          break;
  40061a:	e7cc      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  40061c:	4a22      	ldr	r2, [pc, #136]	; (4006a8 <SystemCoreClockUpdate+0x104>)
  40061e:	4b1e      	ldr	r3, [pc, #120]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400620:	601a      	str	r2, [r3, #0]
          break;
  400622:	e7c8      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400624:	4b1b      	ldr	r3, [pc, #108]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400626:	6a1b      	ldr	r3, [r3, #32]
  400628:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40062c:	d016      	beq.n	40065c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40062e:	4a1c      	ldr	r2, [pc, #112]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  400630:	4b19      	ldr	r3, [pc, #100]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400632:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400634:	4b17      	ldr	r3, [pc, #92]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400638:	f003 0303 	and.w	r3, r3, #3
  40063c:	2b02      	cmp	r3, #2
  40063e:	d1ba      	bne.n	4005b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400640:	4a14      	ldr	r2, [pc, #80]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400642:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400644:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400646:	4814      	ldr	r0, [pc, #80]	; (400698 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400648:	f3c1 410a 	ubfx	r1, r1, #16, #11
  40064c:	6803      	ldr	r3, [r0, #0]
  40064e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400652:	b2d2      	uxtb	r2, r2
  400654:	fbb3 f3f2 	udiv	r3, r3, r2
  400658:	6003      	str	r3, [r0, #0]
  40065a:	e7ac      	b.n	4005b6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40065c:	4a11      	ldr	r2, [pc, #68]	; (4006a4 <SystemCoreClockUpdate+0x100>)
  40065e:	4b0e      	ldr	r3, [pc, #56]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400660:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400662:	4b0c      	ldr	r3, [pc, #48]	; (400694 <SystemCoreClockUpdate+0xf0>)
  400664:	6a1b      	ldr	r3, [r3, #32]
  400666:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40066a:	2b10      	cmp	r3, #16
  40066c:	d005      	beq.n	40067a <SystemCoreClockUpdate+0xd6>
  40066e:	2b20      	cmp	r3, #32
  400670:	d1e0      	bne.n	400634 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400672:	4a0b      	ldr	r2, [pc, #44]	; (4006a0 <SystemCoreClockUpdate+0xfc>)
  400674:	4b08      	ldr	r3, [pc, #32]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400676:	601a      	str	r2, [r3, #0]
          break;
  400678:	e7dc      	b.n	400634 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40067a:	4a0b      	ldr	r2, [pc, #44]	; (4006a8 <SystemCoreClockUpdate+0x104>)
  40067c:	4b06      	ldr	r3, [pc, #24]	; (400698 <SystemCoreClockUpdate+0xf4>)
  40067e:	601a      	str	r2, [r3, #0]
          break;
  400680:	e7d8      	b.n	400634 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400682:	4a05      	ldr	r2, [pc, #20]	; (400698 <SystemCoreClockUpdate+0xf4>)
  400684:	6813      	ldr	r3, [r2, #0]
  400686:	4909      	ldr	r1, [pc, #36]	; (4006ac <SystemCoreClockUpdate+0x108>)
  400688:	fba1 1303 	umull	r1, r3, r1, r3
  40068c:	085b      	lsrs	r3, r3, #1
  40068e:	6013      	str	r3, [r2, #0]
  400690:	4770      	bx	lr
  400692:	bf00      	nop
  400694:	400e0600 	.word	0x400e0600
  400698:	2040000c 	.word	0x2040000c
  40069c:	400e1810 	.word	0x400e1810
  4006a0:	00b71b00 	.word	0x00b71b00
  4006a4:	003d0900 	.word	0x003d0900
  4006a8:	007a1200 	.word	0x007a1200
  4006ac:	aaaaaaab 	.word	0xaaaaaaab

004006b0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4006b0:	4b12      	ldr	r3, [pc, #72]	; (4006fc <system_init_flash+0x4c>)
  4006b2:	4298      	cmp	r0, r3
  4006b4:	d911      	bls.n	4006da <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4006b6:	4b12      	ldr	r3, [pc, #72]	; (400700 <system_init_flash+0x50>)
  4006b8:	4298      	cmp	r0, r3
  4006ba:	d913      	bls.n	4006e4 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4006bc:	4b11      	ldr	r3, [pc, #68]	; (400704 <system_init_flash+0x54>)
  4006be:	4298      	cmp	r0, r3
  4006c0:	d914      	bls.n	4006ec <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4006c2:	4b11      	ldr	r3, [pc, #68]	; (400708 <system_init_flash+0x58>)
  4006c4:	4298      	cmp	r0, r3
  4006c6:	d915      	bls.n	4006f4 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4006c8:	4b10      	ldr	r3, [pc, #64]	; (40070c <system_init_flash+0x5c>)
  4006ca:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4006cc:	bf94      	ite	ls
  4006ce:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4006d2:	4a0f      	ldrhi	r2, [pc, #60]	; (400710 <system_init_flash+0x60>)
  4006d4:	4b0f      	ldr	r3, [pc, #60]	; (400714 <system_init_flash+0x64>)
  4006d6:	601a      	str	r2, [r3, #0]
  4006d8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4006da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4006de:	4b0d      	ldr	r3, [pc, #52]	; (400714 <system_init_flash+0x64>)
  4006e0:	601a      	str	r2, [r3, #0]
  4006e2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4006e4:	4a0c      	ldr	r2, [pc, #48]	; (400718 <system_init_flash+0x68>)
  4006e6:	4b0b      	ldr	r3, [pc, #44]	; (400714 <system_init_flash+0x64>)
  4006e8:	601a      	str	r2, [r3, #0]
  4006ea:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4006ec:	4a0b      	ldr	r2, [pc, #44]	; (40071c <system_init_flash+0x6c>)
  4006ee:	4b09      	ldr	r3, [pc, #36]	; (400714 <system_init_flash+0x64>)
  4006f0:	601a      	str	r2, [r3, #0]
  4006f2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4006f4:	4a0a      	ldr	r2, [pc, #40]	; (400720 <system_init_flash+0x70>)
  4006f6:	4b07      	ldr	r3, [pc, #28]	; (400714 <system_init_flash+0x64>)
  4006f8:	601a      	str	r2, [r3, #0]
  4006fa:	4770      	bx	lr
  4006fc:	01312cff 	.word	0x01312cff
  400700:	026259ff 	.word	0x026259ff
  400704:	039386ff 	.word	0x039386ff
  400708:	04c4b3ff 	.word	0x04c4b3ff
  40070c:	05f5e0ff 	.word	0x05f5e0ff
  400710:	04000500 	.word	0x04000500
  400714:	400e0c00 	.word	0x400e0c00
  400718:	04000100 	.word	0x04000100
  40071c:	04000200 	.word	0x04000200
  400720:	04000300 	.word	0x04000300

00400724 <play>:
/* funcoes                                                              */
/************************/

void play(int notas[],int duracao[],int tamanho,int velocidade){

	for (int i=0; i<tamanho;i++){
  400724:	2a00      	cmp	r2, #0
  400726:	f340 8094 	ble.w	400852 <play+0x12e>
void play(int notas[],int duracao[],int tamanho,int velocidade){
  40072a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40072e:	b085      	sub	sp, #20
  400730:	9203      	str	r2, [sp, #12]
  400732:	9302      	str	r3, [sp, #8]
  400734:	4682      	mov	sl, r0
  400736:	1f0b      	subs	r3, r1, #4
  400738:	9301      	str	r3, [sp, #4]
	for (int i=0; i<tamanho;i++){
  40073a:	f04f 0800 	mov.w	r8, #0
			while (pio_get(BUT_PIO,PIO_INPUT,BUT_PIO_IDX_MASK)) {	
			}
		}
		for (int x=0; x < duracao[i]; x++){
			int wait = 1000000/(2*notas[i]);
			pio_set(PIOA,BUZ_PIO_IDX_MASK);
  40073e:	4d45      	ldr	r5, [pc, #276]	; (400854 <play+0x130>)
			pio_set(LED_PIO,LED_PIO_IDX_MASK);
			delay_us(wait);
  400740:	f8df b13c 	ldr.w	fp, [pc, #316]	; 400880 <play+0x15c>
  400744:	e06c      	b.n	400820 <play+0xfc>
			delay_s(1);
  400746:	4844      	ldr	r0, [pc, #272]	; (400858 <play+0x134>)
  400748:	4b44      	ldr	r3, [pc, #272]	; (40085c <play+0x138>)
  40074a:	4798      	blx	r3
			while (pio_get(BUT_PIO,PIO_INPUT,BUT_PIO_IDX_MASK)) {	
  40074c:	4f44      	ldr	r7, [pc, #272]	; (400860 <play+0x13c>)
  40074e:	f44f 6600 	mov.w	r6, #2048	; 0x800
  400752:	4c44      	ldr	r4, [pc, #272]	; (400864 <play+0x140>)
  400754:	4632      	mov	r2, r6
  400756:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40075a:	4638      	mov	r0, r7
  40075c:	47a0      	blx	r4
  40075e:	2800      	cmp	r0, #0
  400760:	d1f8      	bne.n	400754 <play+0x30>
  400762:	e066      	b.n	400832 <play+0x10e>
			delay_us(wait);
  400764:	2033      	movs	r0, #51	; 0x33
  400766:	4e3d      	ldr	r6, [pc, #244]	; (40085c <play+0x138>)
  400768:	47b0      	blx	r6
			pio_clear(PIOA,BUZ_PIO_IDX_MASK);
  40076a:	2108      	movs	r1, #8
  40076c:	483c      	ldr	r0, [pc, #240]	; (400860 <play+0x13c>)
  40076e:	4f3e      	ldr	r7, [pc, #248]	; (400868 <play+0x144>)
  400770:	47b8      	blx	r7
			pio_clear(LED_PIO,LED_PIO_IDX_MASK);
  400772:	f44f 7180 	mov.w	r1, #256	; 0x100
  400776:	483d      	ldr	r0, [pc, #244]	; (40086c <play+0x148>)
  400778:	47b8      	blx	r7
			delay_us(wait);
  40077a:	2033      	movs	r0, #51	; 0x33
  40077c:	47b0      	blx	r6
		for (int x=0; x < duracao[i]; x++){
  40077e:	3401      	adds	r4, #1
  400780:	f8d9 3000 	ldr.w	r3, [r9]
  400784:	42a3      	cmp	r3, r4
  400786:	dd2b      	ble.n	4007e0 <play+0xbc>
			int wait = 1000000/(2*notas[i]);
  400788:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
  40078c:	0040      	lsls	r0, r0, #1
  40078e:	4b38      	ldr	r3, [pc, #224]	; (400870 <play+0x14c>)
  400790:	fb93 f6f0 	sdiv	r6, r3, r0
			pio_set(PIOA,BUZ_PIO_IDX_MASK);
  400794:	2108      	movs	r1, #8
  400796:	4832      	ldr	r0, [pc, #200]	; (400860 <play+0x13c>)
  400798:	47a8      	blx	r5
			pio_set(LED_PIO,LED_PIO_IDX_MASK);
  40079a:	f44f 7180 	mov.w	r1, #256	; 0x100
  40079e:	4833      	ldr	r0, [pc, #204]	; (40086c <play+0x148>)
  4007a0:	47a8      	blx	r5
			delay_us(wait);
  4007a2:	2e00      	cmp	r6, #0
  4007a4:	d0de      	beq.n	400764 <play+0x40>
  4007a6:	17f3      	asrs	r3, r6, #31
  4007a8:	fba6 010b 	umull	r0, r1, r6, fp
  4007ac:	fb0b 1103 	mla	r1, fp, r3, r1
  4007b0:	4a30      	ldr	r2, [pc, #192]	; (400874 <play+0x150>)
  4007b2:	2300      	movs	r3, #0
  4007b4:	4e30      	ldr	r6, [pc, #192]	; (400878 <play+0x154>)
  4007b6:	2700      	movs	r7, #0
  4007b8:	1836      	adds	r6, r6, r0
  4007ba:	414f      	adcs	r7, r1
  4007bc:	4630      	mov	r0, r6
  4007be:	4639      	mov	r1, r7
  4007c0:	4e2e      	ldr	r6, [pc, #184]	; (40087c <play+0x158>)
  4007c2:	47b0      	blx	r6
  4007c4:	9000      	str	r0, [sp, #0]
  4007c6:	4e25      	ldr	r6, [pc, #148]	; (40085c <play+0x138>)
  4007c8:	47b0      	blx	r6
			pio_clear(PIOA,BUZ_PIO_IDX_MASK);
  4007ca:	2108      	movs	r1, #8
  4007cc:	4824      	ldr	r0, [pc, #144]	; (400860 <play+0x13c>)
  4007ce:	4f26      	ldr	r7, [pc, #152]	; (400868 <play+0x144>)
  4007d0:	47b8      	blx	r7
			pio_clear(LED_PIO,LED_PIO_IDX_MASK);
  4007d2:	f44f 7180 	mov.w	r1, #256	; 0x100
  4007d6:	4825      	ldr	r0, [pc, #148]	; (40086c <play+0x148>)
  4007d8:	47b8      	blx	r7
			delay_us(wait);
  4007da:	9800      	ldr	r0, [sp, #0]
  4007dc:	47b0      	blx	r6
  4007de:	e7ce      	b.n	40077e <play+0x5a>
		}
		pio_set(LED_PIO,LED_PIO_IDX_MASK);
  4007e0:	f44f 7180 	mov.w	r1, #256	; 0x100
  4007e4:	4821      	ldr	r0, [pc, #132]	; (40086c <play+0x148>)
  4007e6:	47a8      	blx	r5
		delay_us(velocidade*duracao[i]);
  4007e8:	f8d9 0000 	ldr.w	r0, [r9]
  4007ec:	9b02      	ldr	r3, [sp, #8]
  4007ee:	fb00 f003 	mul.w	r0, r0, r3
  4007f2:	b338      	cbz	r0, 400844 <play+0x120>
  4007f4:	17c3      	asrs	r3, r0, #31
  4007f6:	fba0 010b 	umull	r0, r1, r0, fp
  4007fa:	fb0b 1103 	mla	r1, fp, r3, r1
  4007fe:	4a1d      	ldr	r2, [pc, #116]	; (400874 <play+0x150>)
  400800:	2300      	movs	r3, #0
  400802:	4e1d      	ldr	r6, [pc, #116]	; (400878 <play+0x154>)
  400804:	2700      	movs	r7, #0
  400806:	1836      	adds	r6, r6, r0
  400808:	414f      	adcs	r7, r1
  40080a:	4630      	mov	r0, r6
  40080c:	4639      	mov	r1, r7
  40080e:	4c1b      	ldr	r4, [pc, #108]	; (40087c <play+0x158>)
  400810:	47a0      	blx	r4
  400812:	4b12      	ldr	r3, [pc, #72]	; (40085c <play+0x138>)
  400814:	4798      	blx	r3
	for (int i=0; i<tamanho;i++){
  400816:	f108 0801 	add.w	r8, r8, #1
  40081a:	9b03      	ldr	r3, [sp, #12]
  40081c:	4543      	cmp	r3, r8
  40081e:	d015      	beq.n	40084c <play+0x128>
		if (!pio_get(BUT_PIO,PIO_INPUT,BUT_PIO_IDX_MASK)){
  400820:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400824:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400828:	480d      	ldr	r0, [pc, #52]	; (400860 <play+0x13c>)
  40082a:	4b0e      	ldr	r3, [pc, #56]	; (400864 <play+0x140>)
  40082c:	4798      	blx	r3
  40082e:	2800      	cmp	r0, #0
  400830:	d089      	beq.n	400746 <play+0x22>
  400832:	9b01      	ldr	r3, [sp, #4]
  400834:	3304      	adds	r3, #4
  400836:	9301      	str	r3, [sp, #4]
  400838:	4699      	mov	r9, r3
		for (int x=0; x < duracao[i]; x++){
  40083a:	681b      	ldr	r3, [r3, #0]
  40083c:	2b00      	cmp	r3, #0
  40083e:	ddcf      	ble.n	4007e0 <play+0xbc>
  400840:	2400      	movs	r4, #0
  400842:	e7a1      	b.n	400788 <play+0x64>
		delay_us(velocidade*duracao[i]);
  400844:	2033      	movs	r0, #51	; 0x33
  400846:	4b05      	ldr	r3, [pc, #20]	; (40085c <play+0x138>)
  400848:	4798      	blx	r3
  40084a:	e7e4      	b.n	400816 <play+0xf2>
	}
}
  40084c:	b005      	add	sp, #20
  40084e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400852:	4770      	bx	lr
  400854:	00400227 	.word	0x00400227
  400858:	0303af6b 	.word	0x0303af6b
  40085c:	20400001 	.word	0x20400001
  400860:	400e0e00 	.word	0x400e0e00
  400864:	0040022f 	.word	0x0040022f
  400868:	0040022b 	.word	0x0040022b
  40086c:	400e1200 	.word	0x400e1200
  400870:	000f4240 	.word	0x000f4240
  400874:	005a83e0 	.word	0x005a83e0
  400878:	005a83df 	.word	0x005a83df
  40087c:	00400b01 	.word	0x00400b01
  400880:	11e1a300 	.word	0x11e1a300

00400884 <init>:




void init(void)
{
  400884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400888:	b083      	sub	sp, #12
  // Initialize the board clock
  sysclk_init();
  40088a:	4b30      	ldr	r3, [pc, #192]	; (40094c <init+0xc8>)
  40088c:	4798      	blx	r3
  
  // Desativa WatchDog Timer
  WDT->WDT_MR = WDT_MR_WDDIS;
  40088e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400892:	4b2f      	ldr	r3, [pc, #188]	; (400950 <init+0xcc>)
  400894:	605a      	str	r2, [r3, #4]
  
  // Ativa o PIO na qual o LED foi conectado
  // para que possamos controlar o LED.
  pmc_enable_periph_clk(BUT_PIO_ID);
  400896:	200a      	movs	r0, #10
  400898:	4d2e      	ldr	r5, [pc, #184]	; (400954 <init+0xd0>)
  40089a:	47a8      	blx	r5
  pmc_enable_periph_clk(LED_PIO_ID);
  40089c:	200c      	movs	r0, #12
  40089e:	47a8      	blx	r5
  pmc_enable_periph_clk(BUZ_PIO_ID);
  4008a0:	200a      	movs	r0, #10
  4008a2:	47a8      	blx	r5
  pmc_enable_periph_clk(BUT1_PLACA_PIO_ID);
  4008a4:	200a      	movs	r0, #10
  4008a6:	47a8      	blx	r5
  pmc_enable_periph_clk(BUT2_PLACA_PIO_ID);
  4008a8:	2010      	movs	r0, #16
  4008aa:	47a8      	blx	r5
  pmc_enable_periph_clk(BUT3_PLACA_PIO_ID);
  4008ac:	200c      	movs	r0, #12
  4008ae:	47a8      	blx	r5
  pmc_enable_periph_clk(LED1_PLACA_PIO_ID);
  4008b0:	200c      	movs	r0, #12
  4008b2:	47a8      	blx	r5
  pmc_enable_periph_clk(LED2_PLACA_PIO_ID);
  4008b4:	2010      	movs	r0, #16
  4008b6:	47a8      	blx	r5
  pmc_enable_periph_clk(LED3_PLACA_PIO_ID);
  4008b8:	2010      	movs	r0, #16
  4008ba:	47a8      	blx	r5
  
  //Inicializa PC8 como saída
  pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  4008bc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 400968 <init+0xe4>
  4008c0:	2400      	movs	r4, #0
  4008c2:	9400      	str	r4, [sp, #0]
  4008c4:	4623      	mov	r3, r4
  4008c6:	4622      	mov	r2, r4
  4008c8:	f44f 7180 	mov.w	r1, #256	; 0x100
  4008cc:	4640      	mov	r0, r8
  4008ce:	4e22      	ldr	r6, [pc, #136]	; (400958 <init+0xd4>)
  4008d0:	47b0      	blx	r6
  pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0, 0);
  4008d2:	4f22      	ldr	r7, [pc, #136]	; (40095c <init+0xd8>)
  4008d4:	9400      	str	r4, [sp, #0]
  4008d6:	4623      	mov	r3, r4
  4008d8:	4622      	mov	r2, r4
  4008da:	2108      	movs	r1, #8
  4008dc:	4638      	mov	r0, r7
  4008de:	47b0      	blx	r6
  pio_set_output(LED1_PLACA_PIO, LED1_PLACA_MASK, 1, 0, 0);
  4008e0:	9400      	str	r4, [sp, #0]
  4008e2:	4623      	mov	r3, r4
  4008e4:	2201      	movs	r2, #1
  4008e6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4008ea:	4640      	mov	r0, r8
  4008ec:	47b0      	blx	r6
  pio_set_output(LED2_PLACA_PIO, LED2_PLACA_MASK, 1, 0, 0);
  4008ee:	f8df 907c 	ldr.w	r9, [pc, #124]	; 40096c <init+0xe8>
  4008f2:	9400      	str	r4, [sp, #0]
  4008f4:	4623      	mov	r3, r4
  4008f6:	2201      	movs	r2, #1
  4008f8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  4008fc:	4648      	mov	r0, r9
  4008fe:	47b0      	blx	r6
  pio_set_output(LED3_PLACA_PIO, LED3_PLACA_MASK, 1, 0, 0);
  400900:	9400      	str	r4, [sp, #0]
  400902:	4623      	mov	r3, r4
  400904:	2201      	movs	r2, #1
  400906:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40090a:	4648      	mov	r0, r9
  40090c:	47b0      	blx	r6
  
  // Inicializa PIO do botao
  pmc_enable_periph_clk(BUT_PIO_ID);
  40090e:	200a      	movs	r0, #10
  400910:	47a8      	blx	r5
  
  pio_pull_up(BUT_PIO, BUT_PIO_IDX_MASK, 1);
  400912:	2201      	movs	r2, #1
  400914:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400918:	4638      	mov	r0, r7
  40091a:	4b11      	ldr	r3, [pc, #68]	; (400960 <init+0xdc>)
  40091c:	4798      	blx	r3
  
  pio_set_input(BUT_PIO, BUT_PIO_IDX_MASK, PIO_DEFAULT); 
  40091e:	4622      	mov	r2, r4
  400920:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400924:	4638      	mov	r0, r7
  400926:	4c0f      	ldr	r4, [pc, #60]	; (400964 <init+0xe0>)
  400928:	47a0      	blx	r4
  pio_set_input(BUT1_PLACA_PIO, BUT1_PLACA_MASK, PIO_DEFAULT | PIO_PULLUP);
  40092a:	2201      	movs	r2, #1
  40092c:	2104      	movs	r1, #4
  40092e:	4638      	mov	r0, r7
  400930:	47a0      	blx	r4
  pio_set_input(BUT2_PLACA_PIO, BUT2_PLACA_MASK, PIO_DEFAULT | PIO_PULLUP);
  400932:	2201      	movs	r2, #1
  400934:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400938:	4648      	mov	r0, r9
  40093a:	47a0      	blx	r4
  pio_set_input(BUT3_PLACA_PIO, BUT3_PLACA_MASK, PIO_DEFAULT | PIO_PULLUP); 
  40093c:	2201      	movs	r2, #1
  40093e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400942:	4640      	mov	r0, r8
  400944:	47a0      	blx	r4
  
}
  400946:	b003      	add	sp, #12
  400948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40094c:	004001ad 	.word	0x004001ad
  400950:	400e1850 	.word	0x400e1850
  400954:	00400485 	.word	0x00400485
  400958:	0040027f 	.word	0x0040027f
  40095c:	400e0e00 	.word	0x400e0e00
  400960:	0040021d 	.word	0x0040021d
  400964:	00400249 	.word	0x00400249
  400968:	400e1200 	.word	0x400e1200
  40096c:	400e1400 	.word	0x400e1400

00400970 <main>:
/* Main                                                                 */
/************************/

// Funcao principal chamada na inicalizacao do uC.
int main(void)
{
  400970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400974:	f5ad 5dfa 	sub.w	sp, sp, #8000	; 0x1f40
  400978:	b083      	sub	sp, #12
	// inicializa sistema e IOs
	init();
  40097a:	4b54      	ldr	r3, [pc, #336]	; (400acc <main+0x15c>)
  40097c:	4798      	blx	r3
  40097e:	4d54      	ldr	r5, [pc, #336]	; (400ad0 <main+0x160>)
  400980:	1f2b      	subs	r3, r5, #4
  400982:	f60d 70a4 	addw	r0, sp, #4004	; 0xfa4
  400986:	4953      	ldr	r1, [pc, #332]	; (400ad4 <main+0x164>)
  400988:	f241 7274 	movw	r2, #6004	; 0x1774
  40098c:	446a      	add	r2, sp
  40098e:	f505 754a 	add.w	r5, r5, #808	; 0x328
	musica musicapiratas;
	musica musicamario;

	//MUSICA PIRATAS DO CARIBE
	for (int i = 0; i < sizeof(notes) / sizeof(notes[0]); i++){
		musicapiratas.notas[i] = notes[i];
  400992:	f853 4f04 	ldr.w	r4, [r3, #4]!
  400996:	f840 4f04 	str.w	r4, [r0, #4]!
		musicapiratas.duracao[i] = duration[i];
  40099a:	f851 4f04 	ldr.w	r4, [r1, #4]!
  40099e:	f842 4f04 	str.w	r4, [r2, #4]!
	for (int i = 0; i < sizeof(notes) / sizeof(notes[0]); i++){
  4009a2:	42ab      	cmp	r3, r5
  4009a4:	d1f5      	bne.n	400992 <main+0x22>
	}
	musicapiratas.tamanho = sizeof(notes) / sizeof(notes[0]);
  4009a6:	23cb      	movs	r3, #203	; 0xcb
  4009a8:	f8cd 3fa4 	str.w	r3, [sp, #4004]	; 0xfa4
  4009ac:	4d4a      	ldr	r5, [pc, #296]	; (400ad8 <main+0x168>)
  4009ae:	1f2b      	subs	r3, r5, #4
  4009b0:	466a      	mov	r2, sp
  4009b2:	484a      	ldr	r0, [pc, #296]	; (400adc <main+0x16c>)
  4009b4:	f50d 61fa 	add.w	r1, sp, #2000	; 0x7d0
  4009b8:	f505 751b 	add.w	r5, r5, #620	; 0x26c

	//MUSICA MARIO
	for (int i = 0; i < sizeof(melodia) / sizeof(melodia[0]); i++){
		musicamario.notas[i] = melodia[i];
  4009bc:	f853 4f04 	ldr.w	r4, [r3, #4]!
  4009c0:	f842 4f04 	str.w	r4, [r2, #4]!
		musicamario.duracao[i] = duracaodasnotas[i];
  4009c4:	f850 4f04 	ldr.w	r4, [r0, #4]!
  4009c8:	f841 4f04 	str.w	r4, [r1, #4]!
	for (int i = 0; i < sizeof(melodia) / sizeof(melodia[0]); i++){
  4009cc:	42ab      	cmp	r3, r5
  4009ce:	d1f5      	bne.n	4009bc <main+0x4c>
	}
	musicamario.tamanho = sizeof(melodia) / sizeof(melodia[0]);
  4009d0:	229c      	movs	r2, #156	; 0x9c
  4009d2:	4b43      	ldr	r3, [pc, #268]	; (400ae0 <main+0x170>)
  4009d4:	f641 7148 	movw	r1, #8008	; 0x1f48
  4009d8:	4469      	add	r1, sp
  4009da:	50ca      	str	r2, [r1, r3]


	
	
	int musica1,musica2,musica3;
	int musicatocando = 0;
  4009dc:	f04f 0b00 	mov.w	fp, #0

	// super loop
	// aplicacoes embarcadas não devem sair do while(1).
	while (1)
	{
		musica1 = pio_get(BUT1_PLACA_PIO, PIO_INPUT, BUT1_PLACA_MASK);
  4009e0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 400afc <main+0x18c>
  4009e4:	f04f 5520 	mov.w	r5, #671088640	; 0x28000000
		musica2 = pio_get(BUT2_PLACA_PIO, PIO_INPUT, BUT2_PLACA_MASK);
  4009e8:	4e3e      	ldr	r6, [pc, #248]	; (400ae4 <main+0x174>)
			pio_set(LED1_PLACA_PIO, LED1_PLACA_MASK);
		}
		
		else if (musicatocando == 2){
			//MUSICA MARIO BROS
			play(musicamario.notas,musicamario.duracao,musicamario.tamanho,1200);
  4009ea:	f20d 7ad4 	addw	sl, sp, #2004	; 0x7d4
  4009ee:	e039      	b.n	400a64 <main+0xf4>
		else if (musica2 != 1){
  4009f0:	f1b8 0f01 	cmp.w	r8, #1
  4009f4:	d01d      	beq.n	400a32 <main+0xc2>
			pio_set(LED1_PLACA_PIO, LED1_PLACA_MASK);
  4009f6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  4009fa:	483b      	ldr	r0, [pc, #236]	; (400ae8 <main+0x178>)
  4009fc:	4c3b      	ldr	r4, [pc, #236]	; (400aec <main+0x17c>)
  4009fe:	47a0      	blx	r4
			pio_clear(LED2_PLACA_PIO,LED2_PLACA_MASK);
  400a00:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400a04:	4630      	mov	r0, r6
  400a06:	4b3a      	ldr	r3, [pc, #232]	; (400af0 <main+0x180>)
  400a08:	4798      	blx	r3
			pio_set(LED3_PLACA_PIO,LED3_PLACA_MASK);
  400a0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400a0e:	4630      	mov	r0, r6
  400a10:	47a0      	blx	r4
			play(musicamario.notas,musicamario.duracao,musicamario.tamanho,1200);
  400a12:	4668      	mov	r0, sp
  400a14:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
  400a18:	f850 2b04 	ldr.w	r2, [r0], #4
  400a1c:	4651      	mov	r1, sl
  400a1e:	4c35      	ldr	r4, [pc, #212]	; (400af4 <main+0x184>)
  400a20:	47a0      	blx	r4
			pio_set(LED2_PLACA_PIO,LED2_PLACA_MASK);
  400a22:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400a26:	4630      	mov	r0, r6
  400a28:	4b30      	ldr	r3, [pc, #192]	; (400aec <main+0x17c>)
  400a2a:	4798      	blx	r3
  400a2c:	f04f 0b02 	mov.w	fp, #2
  400a30:	e018      	b.n	400a64 <main+0xf4>
		else if (musica3 != 1){
  400a32:	2801      	cmp	r0, #1
  400a34:	d010      	beq.n	400a58 <main+0xe8>
			pio_set(LED1_PLACA_PIO, LED1_PLACA_MASK);
  400a36:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400a3a:	482b      	ldr	r0, [pc, #172]	; (400ae8 <main+0x178>)
  400a3c:	4c2b      	ldr	r4, [pc, #172]	; (400aec <main+0x17c>)
  400a3e:	47a0      	blx	r4
			pio_set(LED2_PLACA_PIO,LED2_PLACA_MASK);
  400a40:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400a44:	4630      	mov	r0, r6
  400a46:	47a0      	blx	r4
			pio_clear(LED3_PLACA_PIO,LED3_PLACA_MASK);
  400a48:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400a4c:	4630      	mov	r0, r6
  400a4e:	4b28      	ldr	r3, [pc, #160]	; (400af0 <main+0x180>)
  400a50:	4798      	blx	r3
			musicatocando = 3;
  400a52:	f04f 0b03 	mov.w	fp, #3
  400a56:	e005      	b.n	400a64 <main+0xf4>
		if (musicatocando == 1){
  400a58:	f1bb 0f01 	cmp.w	fp, #1
  400a5c:	d023      	beq.n	400aa6 <main+0x136>
		else if (musicatocando == 2){
  400a5e:	f1bb 0f02 	cmp.w	fp, #2
  400a62:	d0d6      	beq.n	400a12 <main+0xa2>
		musica1 = pio_get(BUT1_PLACA_PIO, PIO_INPUT, BUT1_PLACA_MASK);
  400a64:	2204      	movs	r2, #4
  400a66:	4629      	mov	r1, r5
  400a68:	4648      	mov	r0, r9
  400a6a:	4c23      	ldr	r4, [pc, #140]	; (400af8 <main+0x188>)
  400a6c:	47a0      	blx	r4
  400a6e:	4607      	mov	r7, r0
		musica2 = pio_get(BUT2_PLACA_PIO, PIO_INPUT, BUT2_PLACA_MASK);
  400a70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400a74:	4629      	mov	r1, r5
  400a76:	4630      	mov	r0, r6
  400a78:	47a0      	blx	r4
  400a7a:	4680      	mov	r8, r0
		musica3 = pio_get(BUT3_PLACA_PIO, PIO_INPUT, BUT3_PLACA_MASK);
  400a7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400a80:	4629      	mov	r1, r5
  400a82:	4819      	ldr	r0, [pc, #100]	; (400ae8 <main+0x178>)
  400a84:	47a0      	blx	r4
		if (musica1 != 1){
  400a86:	2f01      	cmp	r7, #1
  400a88:	d0b2      	beq.n	4009f0 <main+0x80>
			pio_clear(LED1_PLACA_PIO, LED1_PLACA_MASK);
  400a8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400a8e:	4816      	ldr	r0, [pc, #88]	; (400ae8 <main+0x178>)
  400a90:	4b17      	ldr	r3, [pc, #92]	; (400af0 <main+0x180>)
  400a92:	4798      	blx	r3
			pio_set(LED2_PLACA_PIO,LED2_PLACA_MASK);
  400a94:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400a98:	4630      	mov	r0, r6
  400a9a:	4c14      	ldr	r4, [pc, #80]	; (400aec <main+0x17c>)
  400a9c:	47a0      	blx	r4
			pio_set(LED3_PLACA_PIO,LED3_PLACA_MASK);
  400a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400aa2:	4630      	mov	r0, r6
  400aa4:	47a0      	blx	r4
			play(musicapiratas.notas,musicapiratas.duracao,musicapiratas.tamanho,500);
  400aa6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  400aaa:	f8dd 2fa4 	ldr.w	r2, [sp, #4004]	; 0xfa4
  400aae:	f241 7178 	movw	r1, #6008	; 0x1778
  400ab2:	4469      	add	r1, sp
  400ab4:	f60d 70a8 	addw	r0, sp, #4008	; 0xfa8
  400ab8:	4c0e      	ldr	r4, [pc, #56]	; (400af4 <main+0x184>)
  400aba:	47a0      	blx	r4
			pio_set(LED1_PLACA_PIO, LED1_PLACA_MASK);
  400abc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400ac0:	4809      	ldr	r0, [pc, #36]	; (400ae8 <main+0x178>)
  400ac2:	4b0a      	ldr	r3, [pc, #40]	; (400aec <main+0x17c>)
  400ac4:	4798      	blx	r3
  400ac6:	f04f 0b01 	mov.w	fp, #1
  400aca:	e7cb      	b.n	400a64 <main+0xf4>
  400acc:	00400885 	.word	0x00400885
  400ad0:	2040081c 	.word	0x2040081c
  400ad4:	2040027c 	.word	0x2040027c
  400ad8:	204005ac 	.word	0x204005ac
  400adc:	2040000c 	.word	0x2040000c
  400ae0:	ffffe0b8 	.word	0xffffe0b8
  400ae4:	400e1400 	.word	0x400e1400
  400ae8:	400e1200 	.word	0x400e1200
  400aec:	00400227 	.word	0x00400227
  400af0:	0040022b 	.word	0x0040022b
  400af4:	00400725 	.word	0x00400725
  400af8:	0040022f 	.word	0x0040022f
  400afc:	400e0e00 	.word	0x400e0e00

00400b00 <__aeabi_uldivmod>:
  400b00:	b953      	cbnz	r3, 400b18 <__aeabi_uldivmod+0x18>
  400b02:	b94a      	cbnz	r2, 400b18 <__aeabi_uldivmod+0x18>
  400b04:	2900      	cmp	r1, #0
  400b06:	bf08      	it	eq
  400b08:	2800      	cmpeq	r0, #0
  400b0a:	bf1c      	itt	ne
  400b0c:	f04f 31ff 	movne.w	r1, #4294967295
  400b10:	f04f 30ff 	movne.w	r0, #4294967295
  400b14:	f000 b97a 	b.w	400e0c <__aeabi_idiv0>
  400b18:	f1ad 0c08 	sub.w	ip, sp, #8
  400b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  400b20:	f000 f806 	bl	400b30 <__udivmoddi4>
  400b24:	f8dd e004 	ldr.w	lr, [sp, #4]
  400b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  400b2c:	b004      	add	sp, #16
  400b2e:	4770      	bx	lr

00400b30 <__udivmoddi4>:
  400b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400b34:	468c      	mov	ip, r1
  400b36:	460d      	mov	r5, r1
  400b38:	4604      	mov	r4, r0
  400b3a:	9e08      	ldr	r6, [sp, #32]
  400b3c:	2b00      	cmp	r3, #0
  400b3e:	d151      	bne.n	400be4 <__udivmoddi4+0xb4>
  400b40:	428a      	cmp	r2, r1
  400b42:	4617      	mov	r7, r2
  400b44:	d96d      	bls.n	400c22 <__udivmoddi4+0xf2>
  400b46:	fab2 fe82 	clz	lr, r2
  400b4a:	f1be 0f00 	cmp.w	lr, #0
  400b4e:	d00b      	beq.n	400b68 <__udivmoddi4+0x38>
  400b50:	f1ce 0c20 	rsb	ip, lr, #32
  400b54:	fa01 f50e 	lsl.w	r5, r1, lr
  400b58:	fa20 fc0c 	lsr.w	ip, r0, ip
  400b5c:	fa02 f70e 	lsl.w	r7, r2, lr
  400b60:	ea4c 0c05 	orr.w	ip, ip, r5
  400b64:	fa00 f40e 	lsl.w	r4, r0, lr
  400b68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  400b6c:	0c25      	lsrs	r5, r4, #16
  400b6e:	fbbc f8fa 	udiv	r8, ip, sl
  400b72:	fa1f f987 	uxth.w	r9, r7
  400b76:	fb0a cc18 	mls	ip, sl, r8, ip
  400b7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  400b7e:	fb08 f309 	mul.w	r3, r8, r9
  400b82:	42ab      	cmp	r3, r5
  400b84:	d90a      	bls.n	400b9c <__udivmoddi4+0x6c>
  400b86:	19ed      	adds	r5, r5, r7
  400b88:	f108 32ff 	add.w	r2, r8, #4294967295
  400b8c:	f080 8123 	bcs.w	400dd6 <__udivmoddi4+0x2a6>
  400b90:	42ab      	cmp	r3, r5
  400b92:	f240 8120 	bls.w	400dd6 <__udivmoddi4+0x2a6>
  400b96:	f1a8 0802 	sub.w	r8, r8, #2
  400b9a:	443d      	add	r5, r7
  400b9c:	1aed      	subs	r5, r5, r3
  400b9e:	b2a4      	uxth	r4, r4
  400ba0:	fbb5 f0fa 	udiv	r0, r5, sl
  400ba4:	fb0a 5510 	mls	r5, sl, r0, r5
  400ba8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  400bac:	fb00 f909 	mul.w	r9, r0, r9
  400bb0:	45a1      	cmp	r9, r4
  400bb2:	d909      	bls.n	400bc8 <__udivmoddi4+0x98>
  400bb4:	19e4      	adds	r4, r4, r7
  400bb6:	f100 33ff 	add.w	r3, r0, #4294967295
  400bba:	f080 810a 	bcs.w	400dd2 <__udivmoddi4+0x2a2>
  400bbe:	45a1      	cmp	r9, r4
  400bc0:	f240 8107 	bls.w	400dd2 <__udivmoddi4+0x2a2>
  400bc4:	3802      	subs	r0, #2
  400bc6:	443c      	add	r4, r7
  400bc8:	eba4 0409 	sub.w	r4, r4, r9
  400bcc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  400bd0:	2100      	movs	r1, #0
  400bd2:	2e00      	cmp	r6, #0
  400bd4:	d061      	beq.n	400c9a <__udivmoddi4+0x16a>
  400bd6:	fa24 f40e 	lsr.w	r4, r4, lr
  400bda:	2300      	movs	r3, #0
  400bdc:	6034      	str	r4, [r6, #0]
  400bde:	6073      	str	r3, [r6, #4]
  400be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400be4:	428b      	cmp	r3, r1
  400be6:	d907      	bls.n	400bf8 <__udivmoddi4+0xc8>
  400be8:	2e00      	cmp	r6, #0
  400bea:	d054      	beq.n	400c96 <__udivmoddi4+0x166>
  400bec:	2100      	movs	r1, #0
  400bee:	e886 0021 	stmia.w	r6, {r0, r5}
  400bf2:	4608      	mov	r0, r1
  400bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400bf8:	fab3 f183 	clz	r1, r3
  400bfc:	2900      	cmp	r1, #0
  400bfe:	f040 808e 	bne.w	400d1e <__udivmoddi4+0x1ee>
  400c02:	42ab      	cmp	r3, r5
  400c04:	d302      	bcc.n	400c0c <__udivmoddi4+0xdc>
  400c06:	4282      	cmp	r2, r0
  400c08:	f200 80fa 	bhi.w	400e00 <__udivmoddi4+0x2d0>
  400c0c:	1a84      	subs	r4, r0, r2
  400c0e:	eb65 0503 	sbc.w	r5, r5, r3
  400c12:	2001      	movs	r0, #1
  400c14:	46ac      	mov	ip, r5
  400c16:	2e00      	cmp	r6, #0
  400c18:	d03f      	beq.n	400c9a <__udivmoddi4+0x16a>
  400c1a:	e886 1010 	stmia.w	r6, {r4, ip}
  400c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c22:	b912      	cbnz	r2, 400c2a <__udivmoddi4+0xfa>
  400c24:	2701      	movs	r7, #1
  400c26:	fbb7 f7f2 	udiv	r7, r7, r2
  400c2a:	fab7 fe87 	clz	lr, r7
  400c2e:	f1be 0f00 	cmp.w	lr, #0
  400c32:	d134      	bne.n	400c9e <__udivmoddi4+0x16e>
  400c34:	1beb      	subs	r3, r5, r7
  400c36:	0c3a      	lsrs	r2, r7, #16
  400c38:	fa1f fc87 	uxth.w	ip, r7
  400c3c:	2101      	movs	r1, #1
  400c3e:	fbb3 f8f2 	udiv	r8, r3, r2
  400c42:	0c25      	lsrs	r5, r4, #16
  400c44:	fb02 3318 	mls	r3, r2, r8, r3
  400c48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  400c4c:	fb0c f308 	mul.w	r3, ip, r8
  400c50:	42ab      	cmp	r3, r5
  400c52:	d907      	bls.n	400c64 <__udivmoddi4+0x134>
  400c54:	19ed      	adds	r5, r5, r7
  400c56:	f108 30ff 	add.w	r0, r8, #4294967295
  400c5a:	d202      	bcs.n	400c62 <__udivmoddi4+0x132>
  400c5c:	42ab      	cmp	r3, r5
  400c5e:	f200 80d1 	bhi.w	400e04 <__udivmoddi4+0x2d4>
  400c62:	4680      	mov	r8, r0
  400c64:	1aed      	subs	r5, r5, r3
  400c66:	b2a3      	uxth	r3, r4
  400c68:	fbb5 f0f2 	udiv	r0, r5, r2
  400c6c:	fb02 5510 	mls	r5, r2, r0, r5
  400c70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  400c74:	fb0c fc00 	mul.w	ip, ip, r0
  400c78:	45a4      	cmp	ip, r4
  400c7a:	d907      	bls.n	400c8c <__udivmoddi4+0x15c>
  400c7c:	19e4      	adds	r4, r4, r7
  400c7e:	f100 33ff 	add.w	r3, r0, #4294967295
  400c82:	d202      	bcs.n	400c8a <__udivmoddi4+0x15a>
  400c84:	45a4      	cmp	ip, r4
  400c86:	f200 80b8 	bhi.w	400dfa <__udivmoddi4+0x2ca>
  400c8a:	4618      	mov	r0, r3
  400c8c:	eba4 040c 	sub.w	r4, r4, ip
  400c90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  400c94:	e79d      	b.n	400bd2 <__udivmoddi4+0xa2>
  400c96:	4631      	mov	r1, r6
  400c98:	4630      	mov	r0, r6
  400c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400c9e:	f1ce 0420 	rsb	r4, lr, #32
  400ca2:	fa05 f30e 	lsl.w	r3, r5, lr
  400ca6:	fa07 f70e 	lsl.w	r7, r7, lr
  400caa:	fa20 f804 	lsr.w	r8, r0, r4
  400cae:	0c3a      	lsrs	r2, r7, #16
  400cb0:	fa25 f404 	lsr.w	r4, r5, r4
  400cb4:	ea48 0803 	orr.w	r8, r8, r3
  400cb8:	fbb4 f1f2 	udiv	r1, r4, r2
  400cbc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  400cc0:	fb02 4411 	mls	r4, r2, r1, r4
  400cc4:	fa1f fc87 	uxth.w	ip, r7
  400cc8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  400ccc:	fb01 f30c 	mul.w	r3, r1, ip
  400cd0:	42ab      	cmp	r3, r5
  400cd2:	fa00 f40e 	lsl.w	r4, r0, lr
  400cd6:	d909      	bls.n	400cec <__udivmoddi4+0x1bc>
  400cd8:	19ed      	adds	r5, r5, r7
  400cda:	f101 30ff 	add.w	r0, r1, #4294967295
  400cde:	f080 808a 	bcs.w	400df6 <__udivmoddi4+0x2c6>
  400ce2:	42ab      	cmp	r3, r5
  400ce4:	f240 8087 	bls.w	400df6 <__udivmoddi4+0x2c6>
  400ce8:	3902      	subs	r1, #2
  400cea:	443d      	add	r5, r7
  400cec:	1aeb      	subs	r3, r5, r3
  400cee:	fa1f f588 	uxth.w	r5, r8
  400cf2:	fbb3 f0f2 	udiv	r0, r3, r2
  400cf6:	fb02 3310 	mls	r3, r2, r0, r3
  400cfa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  400cfe:	fb00 f30c 	mul.w	r3, r0, ip
  400d02:	42ab      	cmp	r3, r5
  400d04:	d907      	bls.n	400d16 <__udivmoddi4+0x1e6>
  400d06:	19ed      	adds	r5, r5, r7
  400d08:	f100 38ff 	add.w	r8, r0, #4294967295
  400d0c:	d26f      	bcs.n	400dee <__udivmoddi4+0x2be>
  400d0e:	42ab      	cmp	r3, r5
  400d10:	d96d      	bls.n	400dee <__udivmoddi4+0x2be>
  400d12:	3802      	subs	r0, #2
  400d14:	443d      	add	r5, r7
  400d16:	1aeb      	subs	r3, r5, r3
  400d18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  400d1c:	e78f      	b.n	400c3e <__udivmoddi4+0x10e>
  400d1e:	f1c1 0720 	rsb	r7, r1, #32
  400d22:	fa22 f807 	lsr.w	r8, r2, r7
  400d26:	408b      	lsls	r3, r1
  400d28:	fa05 f401 	lsl.w	r4, r5, r1
  400d2c:	ea48 0303 	orr.w	r3, r8, r3
  400d30:	fa20 fe07 	lsr.w	lr, r0, r7
  400d34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  400d38:	40fd      	lsrs	r5, r7
  400d3a:	ea4e 0e04 	orr.w	lr, lr, r4
  400d3e:	fbb5 f9fc 	udiv	r9, r5, ip
  400d42:	ea4f 441e 	mov.w	r4, lr, lsr #16
  400d46:	fb0c 5519 	mls	r5, ip, r9, r5
  400d4a:	fa1f f883 	uxth.w	r8, r3
  400d4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  400d52:	fb09 f408 	mul.w	r4, r9, r8
  400d56:	42ac      	cmp	r4, r5
  400d58:	fa02 f201 	lsl.w	r2, r2, r1
  400d5c:	fa00 fa01 	lsl.w	sl, r0, r1
  400d60:	d908      	bls.n	400d74 <__udivmoddi4+0x244>
  400d62:	18ed      	adds	r5, r5, r3
  400d64:	f109 30ff 	add.w	r0, r9, #4294967295
  400d68:	d243      	bcs.n	400df2 <__udivmoddi4+0x2c2>
  400d6a:	42ac      	cmp	r4, r5
  400d6c:	d941      	bls.n	400df2 <__udivmoddi4+0x2c2>
  400d6e:	f1a9 0902 	sub.w	r9, r9, #2
  400d72:	441d      	add	r5, r3
  400d74:	1b2d      	subs	r5, r5, r4
  400d76:	fa1f fe8e 	uxth.w	lr, lr
  400d7a:	fbb5 f0fc 	udiv	r0, r5, ip
  400d7e:	fb0c 5510 	mls	r5, ip, r0, r5
  400d82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  400d86:	fb00 f808 	mul.w	r8, r0, r8
  400d8a:	45a0      	cmp	r8, r4
  400d8c:	d907      	bls.n	400d9e <__udivmoddi4+0x26e>
  400d8e:	18e4      	adds	r4, r4, r3
  400d90:	f100 35ff 	add.w	r5, r0, #4294967295
  400d94:	d229      	bcs.n	400dea <__udivmoddi4+0x2ba>
  400d96:	45a0      	cmp	r8, r4
  400d98:	d927      	bls.n	400dea <__udivmoddi4+0x2ba>
  400d9a:	3802      	subs	r0, #2
  400d9c:	441c      	add	r4, r3
  400d9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  400da2:	eba4 0408 	sub.w	r4, r4, r8
  400da6:	fba0 8902 	umull	r8, r9, r0, r2
  400daa:	454c      	cmp	r4, r9
  400dac:	46c6      	mov	lr, r8
  400dae:	464d      	mov	r5, r9
  400db0:	d315      	bcc.n	400dde <__udivmoddi4+0x2ae>
  400db2:	d012      	beq.n	400dda <__udivmoddi4+0x2aa>
  400db4:	b156      	cbz	r6, 400dcc <__udivmoddi4+0x29c>
  400db6:	ebba 030e 	subs.w	r3, sl, lr
  400dba:	eb64 0405 	sbc.w	r4, r4, r5
  400dbe:	fa04 f707 	lsl.w	r7, r4, r7
  400dc2:	40cb      	lsrs	r3, r1
  400dc4:	431f      	orrs	r7, r3
  400dc6:	40cc      	lsrs	r4, r1
  400dc8:	6037      	str	r7, [r6, #0]
  400dca:	6074      	str	r4, [r6, #4]
  400dcc:	2100      	movs	r1, #0
  400dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400dd2:	4618      	mov	r0, r3
  400dd4:	e6f8      	b.n	400bc8 <__udivmoddi4+0x98>
  400dd6:	4690      	mov	r8, r2
  400dd8:	e6e0      	b.n	400b9c <__udivmoddi4+0x6c>
  400dda:	45c2      	cmp	sl, r8
  400ddc:	d2ea      	bcs.n	400db4 <__udivmoddi4+0x284>
  400dde:	ebb8 0e02 	subs.w	lr, r8, r2
  400de2:	eb69 0503 	sbc.w	r5, r9, r3
  400de6:	3801      	subs	r0, #1
  400de8:	e7e4      	b.n	400db4 <__udivmoddi4+0x284>
  400dea:	4628      	mov	r0, r5
  400dec:	e7d7      	b.n	400d9e <__udivmoddi4+0x26e>
  400dee:	4640      	mov	r0, r8
  400df0:	e791      	b.n	400d16 <__udivmoddi4+0x1e6>
  400df2:	4681      	mov	r9, r0
  400df4:	e7be      	b.n	400d74 <__udivmoddi4+0x244>
  400df6:	4601      	mov	r1, r0
  400df8:	e778      	b.n	400cec <__udivmoddi4+0x1bc>
  400dfa:	3802      	subs	r0, #2
  400dfc:	443c      	add	r4, r7
  400dfe:	e745      	b.n	400c8c <__udivmoddi4+0x15c>
  400e00:	4608      	mov	r0, r1
  400e02:	e708      	b.n	400c16 <__udivmoddi4+0xe6>
  400e04:	f1a8 0802 	sub.w	r8, r8, #2
  400e08:	443d      	add	r5, r7
  400e0a:	e72b      	b.n	400c64 <__udivmoddi4+0x134>

00400e0c <__aeabi_idiv0>:
  400e0c:	4770      	bx	lr
  400e0e:	bf00      	nop

00400e10 <__libc_init_array>:
  400e10:	b570      	push	{r4, r5, r6, lr}
  400e12:	4e0f      	ldr	r6, [pc, #60]	; (400e50 <__libc_init_array+0x40>)
  400e14:	4d0f      	ldr	r5, [pc, #60]	; (400e54 <__libc_init_array+0x44>)
  400e16:	1b76      	subs	r6, r6, r5
  400e18:	10b6      	asrs	r6, r6, #2
  400e1a:	bf18      	it	ne
  400e1c:	2400      	movne	r4, #0
  400e1e:	d005      	beq.n	400e2c <__libc_init_array+0x1c>
  400e20:	3401      	adds	r4, #1
  400e22:	f855 3b04 	ldr.w	r3, [r5], #4
  400e26:	4798      	blx	r3
  400e28:	42a6      	cmp	r6, r4
  400e2a:	d1f9      	bne.n	400e20 <__libc_init_array+0x10>
  400e2c:	4e0a      	ldr	r6, [pc, #40]	; (400e58 <__libc_init_array+0x48>)
  400e2e:	4d0b      	ldr	r5, [pc, #44]	; (400e5c <__libc_init_array+0x4c>)
  400e30:	1b76      	subs	r6, r6, r5
  400e32:	f000 f8a7 	bl	400f84 <_init>
  400e36:	10b6      	asrs	r6, r6, #2
  400e38:	bf18      	it	ne
  400e3a:	2400      	movne	r4, #0
  400e3c:	d006      	beq.n	400e4c <__libc_init_array+0x3c>
  400e3e:	3401      	adds	r4, #1
  400e40:	f855 3b04 	ldr.w	r3, [r5], #4
  400e44:	4798      	blx	r3
  400e46:	42a6      	cmp	r6, r4
  400e48:	d1f9      	bne.n	400e3e <__libc_init_array+0x2e>
  400e4a:	bd70      	pop	{r4, r5, r6, pc}
  400e4c:	bd70      	pop	{r4, r5, r6, pc}
  400e4e:	bf00      	nop
  400e50:	00400f90 	.word	0x00400f90
  400e54:	00400f90 	.word	0x00400f90
  400e58:	00400f98 	.word	0x00400f98
  400e5c:	00400f90 	.word	0x00400f90

00400e60 <register_fini>:
  400e60:	4b02      	ldr	r3, [pc, #8]	; (400e6c <register_fini+0xc>)
  400e62:	b113      	cbz	r3, 400e6a <register_fini+0xa>
  400e64:	4802      	ldr	r0, [pc, #8]	; (400e70 <register_fini+0x10>)
  400e66:	f000 b805 	b.w	400e74 <atexit>
  400e6a:	4770      	bx	lr
  400e6c:	00000000 	.word	0x00000000
  400e70:	00400e81 	.word	0x00400e81

00400e74 <atexit>:
  400e74:	2300      	movs	r3, #0
  400e76:	4601      	mov	r1, r0
  400e78:	461a      	mov	r2, r3
  400e7a:	4618      	mov	r0, r3
  400e7c:	f000 b81e 	b.w	400ebc <__register_exitproc>

00400e80 <__libc_fini_array>:
  400e80:	b538      	push	{r3, r4, r5, lr}
  400e82:	4c0a      	ldr	r4, [pc, #40]	; (400eac <__libc_fini_array+0x2c>)
  400e84:	4d0a      	ldr	r5, [pc, #40]	; (400eb0 <__libc_fini_array+0x30>)
  400e86:	1b64      	subs	r4, r4, r5
  400e88:	10a4      	asrs	r4, r4, #2
  400e8a:	d00a      	beq.n	400ea2 <__libc_fini_array+0x22>
  400e8c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  400e90:	3b01      	subs	r3, #1
  400e92:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  400e96:	3c01      	subs	r4, #1
  400e98:	f855 3904 	ldr.w	r3, [r5], #-4
  400e9c:	4798      	blx	r3
  400e9e:	2c00      	cmp	r4, #0
  400ea0:	d1f9      	bne.n	400e96 <__libc_fini_array+0x16>
  400ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  400ea6:	f000 b877 	b.w	400f98 <_fini>
  400eaa:	bf00      	nop
  400eac:	00400fa8 	.word	0x00400fa8
  400eb0:	00400fa4 	.word	0x00400fa4

00400eb4 <__retarget_lock_acquire_recursive>:
  400eb4:	4770      	bx	lr
  400eb6:	bf00      	nop

00400eb8 <__retarget_lock_release_recursive>:
  400eb8:	4770      	bx	lr
  400eba:	bf00      	nop

00400ebc <__register_exitproc>:
  400ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400ec0:	4d2c      	ldr	r5, [pc, #176]	; (400f74 <__register_exitproc+0xb8>)
  400ec2:	4606      	mov	r6, r0
  400ec4:	6828      	ldr	r0, [r5, #0]
  400ec6:	4698      	mov	r8, r3
  400ec8:	460f      	mov	r7, r1
  400eca:	4691      	mov	r9, r2
  400ecc:	f7ff fff2 	bl	400eb4 <__retarget_lock_acquire_recursive>
  400ed0:	4b29      	ldr	r3, [pc, #164]	; (400f78 <__register_exitproc+0xbc>)
  400ed2:	681c      	ldr	r4, [r3, #0]
  400ed4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  400ed8:	2b00      	cmp	r3, #0
  400eda:	d03e      	beq.n	400f5a <__register_exitproc+0x9e>
  400edc:	685a      	ldr	r2, [r3, #4]
  400ede:	2a1f      	cmp	r2, #31
  400ee0:	dc1c      	bgt.n	400f1c <__register_exitproc+0x60>
  400ee2:	f102 0e01 	add.w	lr, r2, #1
  400ee6:	b176      	cbz	r6, 400f06 <__register_exitproc+0x4a>
  400ee8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  400eec:	2401      	movs	r4, #1
  400eee:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  400ef2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  400ef6:	4094      	lsls	r4, r2
  400ef8:	4320      	orrs	r0, r4
  400efa:	2e02      	cmp	r6, #2
  400efc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  400f00:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  400f04:	d023      	beq.n	400f4e <__register_exitproc+0x92>
  400f06:	3202      	adds	r2, #2
  400f08:	f8c3 e004 	str.w	lr, [r3, #4]
  400f0c:	6828      	ldr	r0, [r5, #0]
  400f0e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  400f12:	f7ff ffd1 	bl	400eb8 <__retarget_lock_release_recursive>
  400f16:	2000      	movs	r0, #0
  400f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f1c:	4b17      	ldr	r3, [pc, #92]	; (400f7c <__register_exitproc+0xc0>)
  400f1e:	b30b      	cbz	r3, 400f64 <__register_exitproc+0xa8>
  400f20:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400f24:	f3af 8000 	nop.w
  400f28:	4603      	mov	r3, r0
  400f2a:	b1d8      	cbz	r0, 400f64 <__register_exitproc+0xa8>
  400f2c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  400f30:	6002      	str	r2, [r0, #0]
  400f32:	2100      	movs	r1, #0
  400f34:	6041      	str	r1, [r0, #4]
  400f36:	460a      	mov	r2, r1
  400f38:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  400f3c:	f04f 0e01 	mov.w	lr, #1
  400f40:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  400f44:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  400f48:	2e00      	cmp	r6, #0
  400f4a:	d0dc      	beq.n	400f06 <__register_exitproc+0x4a>
  400f4c:	e7cc      	b.n	400ee8 <__register_exitproc+0x2c>
  400f4e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  400f52:	430c      	orrs	r4, r1
  400f54:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  400f58:	e7d5      	b.n	400f06 <__register_exitproc+0x4a>
  400f5a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  400f5e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  400f62:	e7bb      	b.n	400edc <__register_exitproc+0x20>
  400f64:	6828      	ldr	r0, [r5, #0]
  400f66:	f7ff ffa7 	bl	400eb8 <__retarget_lock_release_recursive>
  400f6a:	f04f 30ff 	mov.w	r0, #4294967295
  400f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400f72:	bf00      	nop
  400f74:	20400f70 	.word	0x20400f70
  400f78:	00400f80 	.word	0x00400f80
  400f7c:	00000000 	.word	0x00000000

00400f80 <_global_impure_ptr>:
  400f80:	20400b48                                H.@ 

00400f84 <_init>:
  400f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f86:	bf00      	nop
  400f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400f8a:	bc08      	pop	{r3}
  400f8c:	469e      	mov	lr, r3
  400f8e:	4770      	bx	lr

00400f90 <__init_array_start>:
  400f90:	00400e61 	.word	0x00400e61

00400f94 <__frame_dummy_init_array_entry>:
  400f94:	00400165                                e.@.

00400f98 <_fini>:
  400f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400f9a:	bf00      	nop
  400f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  400f9e:	bc08      	pop	{r3}
  400fa0:	469e      	mov	lr, r3
  400fa2:	4770      	bx	lr

00400fa4 <__fini_array_start>:
  400fa4:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <duracaodasnotas>:
20400010:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400020:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400030:	0064 0000 0064 0000 0064 0000 0050 0000     d...d...d...P...
20400040:	0064 0000 0064 0000 0064 0000 0050 0000     d...d...d...P...
20400050:	0032 0000 0064 0000 0050 0000 0032 0000     2...d...P...2...
20400060:	0050 0000 0050 0000 0050 0000 0050 0000     P...P...P...P...
20400070:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400080:	0050 0000 0064 0000 0064 0000 0064 0000     P...d...d...d...
20400090:	0050 0000 0032 0000 0064 0000 0050 0000     P...2...d...P...
204000a0:	0032 0000 0050 0000 0050 0000 0050 0000     2...P...P...P...
204000b0:	0050 0000 0064 0000 0064 0000 0064 0000     P...d...d...d...
204000c0:	0064 0000 0096 0000 0096 0000 0064 0000     d...........d...
204000d0:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
204000e0:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
204000f0:	0064 0000 0096 0000 00c8 0000 0050 0000     d...........P...
20400100:	0050 0000 0050 0000 0064 0000 0064 0000     P...P...d...d...
20400110:	0064 0000 0064 0000 0064 0000 0096 0000     d...d...d.......
20400120:	0096 0000 0064 0000 0064 0000 0064 0000     ....d...d...d...
20400130:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400140:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400150:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400160:	0064 0000 0064 0000 0096 0000 0096 0000     d...d...........
20400170:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400180:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
20400190:	0064 0000 0064 0000 0096 0000 00c8 0000     d...d...........
204001a0:	0050 0000 0050 0000 0050 0000 0064 0000     P...P...P...d...
204001b0:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
204001c0:	0096 0000 0096 0000 0064 0000 0064 0000     ........d...d...
204001d0:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
204001e0:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
204001f0:	0064 0000 0064 0000 0064 0000 003c 0000     d...d...d...<...
20400200:	0050 0000 003c 0000 0050 0000 0050 0000     P...<...P...P...
20400210:	0050 0000 0050 0000 0050 0000 0050 0000     P...P...P...P...
20400220:	003c 0000 0050 0000 003c 0000 0050 0000     <...P...<...P...
20400230:	0050 0000 0050 0000 0050 0000 0050 0000     P...P...P...P...
20400240:	003c 0000 0050 0000 003c 0000 0050 0000     <...P...<...P...
20400250:	0050 0000 0050 0000 0050 0000 0050 0000     P...P...P...P...
20400260:	0050 0000 0064 0000 0064 0000 0064 0000     P...d...d...d...
20400270:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...

20400280 <duration>:
20400280:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400290:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
204002a0:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204002b0:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204002c0:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204002d0:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204002e0:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204002f0:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400300:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400310:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
20400320:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400330:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400340:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400350:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400360:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400370:	00fa 0000 007d 0000 007d 0000 00fa 0000     ....}...}.......
20400380:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400390:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204003a0:	007d 0000 007d 0000 0177 0000 0177 0000     }...}...w...w...
204003b0:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204003c0:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204003d0:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204003e0:	007d 0000 007d 0000 0177 0000 007d 0000     }...}...w...}...
204003f0:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400400:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400410:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400420:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400430:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400440:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400450:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400460:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400470:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400480:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400490:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204004a0:	00fa 0000 007d 0000 00fa 0000 007d 0000     ....}.......}...
204004b0:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204004c0:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
204004d0:	0177 0000 00fa 0000 007d 0000 0177 0000     w.......}...w...
204004e0:	00fa 0000 007d 0000 0177 0000 007d 0000     ....}...w...}...
204004f0:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400500:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
20400510:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
20400520:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400530:	007d 0000 007d 0000 007d 0000 01f4 0000     }...}...}.......
20400540:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
20400550:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400560:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400570:	007d 0000 007d 0000 0177 0000 00fa 0000     }...}...w.......
20400580:	007d 0000 0177 0000 00fa 0000 007d 0000     }...w.......}...
20400590:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
204005a0:	007d 0000 007d 0000 01f4 0000               }...}.......

204005ac <melodia>:
204005ac:	0294 0000 0294 0000 0294 0000 01fe 0000     ................
204005bc:	0294 0000 0302 0000 017c 0000 01fe 0000     ........|.......
204005cc:	017c 0000 0140 0000 01b8 0000 01e0 0000     |...@...........
204005dc:	01c2 0000 01ae 0000 017c 0000 0294 0000     ........|.......
204005ec:	02f8 0000 035c 0000 02bc 0000 02f8 0000     ....\...........
204005fc:	0294 0000 0208 0000 0244 0000 01e0 0000     ........D.......
2040060c:	01fe 0000 017c 0000 0140 0000 01b8 0000     ....|...@.......
2040061c:	01e0 0000 01c2 0000 01ae 0000 017c 0000     ............|...
2040062c:	0294 0000 02f8 0000 035c 0000 02bc 0000     ........\.......
2040063c:	02f8 0000 0294 0000 0208 0000 0244 0000     ............D...
2040064c:	01e0 0000 01f4 0000 02f8 0000 02d0 0000     ................
2040065c:	02a8 0000 026c 0000 028a 0000 017c 0000     ....l.......|...
2040066c:	01ae 0000 01f4 0000 01ae 0000 01f4 0000     ................
2040067c:	023a 0000 01f4 0000 02f8 0000 02d0 0000     :...............
2040068c:	02a8 0000 026c 0000 028a 0000 03fc 0000     ....l...........
2040069c:	03fc 0000 03fc 0000 017c 0000 01f4 0000     ........|.......
204006ac:	02f8 0000 02d0 0000 02a8 0000 026c 0000     ............l...
204006bc:	028a 0000 017c 0000 01ae 0000 01f4 0000     ....|...........
204006cc:	01ae 0000 01f4 0000 023a 0000 0249 0000     ........:...I...
204006dc:	0226 0000 01f4 0000 017c 0000 01f4 0000     &.......|.......
204006ec:	01f4 0000 01f4 0000 01f4 0000 02f8 0000     ................
204006fc:	02d0 0000 02a8 0000 026c 0000 028a 0000     ........l.......
2040070c:	017c 0000 01ae 0000 01f4 0000 01ae 0000     |...............
2040071c:	01f4 0000 023a 0000 01f4 0000 02f8 0000     ....:...........
2040072c:	02d0 0000 02a8 0000 026c 0000 028a 0000     ........l.......
2040073c:	03fc 0000 03fc 0000 03fc 0000 017c 0000     ............|...
2040074c:	01f4 0000 02f8 0000 02d0 0000 02a8 0000     ................
2040075c:	026c 0000 028a 0000 017c 0000 01ae 0000     l.......|.......
2040076c:	01f4 0000 01ae 0000 01f4 0000 023a 0000     ............:...
2040077c:	0249 0000 0226 0000 01f4 0000 017c 0000     I...&.......|...
2040078c:	01f4 0000 01f4 0000 01f4 0000 01f4 0000     ................
2040079c:	01f4 0000 01f4 0000 01f4 0000 0244 0000     ............D...
204007ac:	0294 0000 01f4 0000 01ae 0000 017c 0000     ............|...
204007bc:	01f4 0000 01f4 0000 01f4 0000 01f4 0000     ................
204007cc:	0244 0000 0294 0000 0366 0000 02f8 0000     D.......f.......
204007dc:	01f4 0000 01f4 0000 01f4 0000 01f4 0000     ................
204007ec:	0244 0000 0294 0000 01f4 0000 01ae 0000     D...............
204007fc:	017c 0000 0294 0000 0294 0000 0294 0000     |...............
2040080c:	01fe 0000 0294 0000 0302 0000 017c 0000     ............|...

2040081c <notes>:
2040081c:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
2040082c:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
2040083c:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
2040084c:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
2040085c:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
2040086c:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
2040087c:	01b8 0000 01ee 0000 020b 0000 020b 0000     ................
2040088c:	0000 0000 020b 0000 024b 0000 01ee 0000     ........K.......
2040089c:	01ee 0000 0000 0000 01b8 0000 0188 0000     ................
204008ac:	01b8 0000 0000 0000 014a 0000 0188 0000     ........J.......
204008bc:	01b8 0000 01b8 0000 0000 0000 01b8 0000     ................
204008cc:	020b 0000 024b 0000 024b 0000 0000 0000     ....K...K.......
204008dc:	024b 0000 0293 0000 02ba 0000 02ba 0000     K...............
204008ec:	0000 0000 0293 0000 024b 0000 0293 0000     ........K.......
204008fc:	01b8 0000 0000 0000 01b8 0000 01ee 0000     ................
2040090c:	020b 0000 020b 0000 0000 0000 024b 0000     ............K...
2040091c:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
2040092c:	020b 0000 01ee 0000 01ee 0000 0000 0000     ................
2040093c:	020b 0000 01b8 0000 01ee 0000 0000 0000     ................
2040094c:	01b8 0000 01b8 0000 01b8 0000 01ee 0000     ................
2040095c:	020b 0000 020b 0000 0000 0000 020b 0000     ................
2040096c:	024b 0000 01ee 0000 01ee 0000 0000 0000     K...............
2040097c:	01b8 0000 0188 0000 01b8 0000 0000 0000     ................
2040098c:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
2040099c:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
204009ac:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
204009bc:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
204009cc:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
204009dc:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
204009ec:	01b8 0000 020b 0000 024b 0000 024b 0000     ........K...K...
204009fc:	0000 0000 024b 0000 0293 0000 02ba 0000     ....K...........
20400a0c:	02ba 0000 0000 0000 0293 0000 024b 0000     ............K...
20400a1c:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
20400a2c:	01ee 0000 020b 0000 020b 0000 0000 0000     ................
20400a3c:	024b 0000 0293 0000 01b8 0000 0000 0000     K...............
20400a4c:	01b8 0000 020b 0000 01ee 0000 01ee 0000     ................
20400a5c:	0000 0000 020b 0000 01b8 0000 01ee 0000     ................
20400a6c:	0000 0000 0293 0000 0000 0000 0000 0000     ................
20400a7c:	02ba 0000 0000 0000 0000 0000 0293 0000     ................
20400a8c:	0293 0000 0000 0000 0310 0000 0000 0000     ................
20400a9c:	0293 0000 024b 0000 0000 0000 0000 0000     ....K...........
20400aac:	024b 0000 0000 0000 0000 0000 020b 0000     K...............
	...
20400ac4:	01ee 0000 020b 0000 0000 0000 01ee 0000     ................
20400ad4:	0000 0000 01b8 0000 0293 0000 0000 0000     ................
20400ae4:	0000 0000 02ba 0000 0000 0000 0000 0000     ................
20400af4:	0293 0000 0293 0000 0000 0000 0310 0000     ................
20400b04:	0000 0000 0293 0000 024b 0000 0000 0000     ........K.......
20400b14:	0000 0000 024b 0000 0000 0000 0000 0000     ....K...........
20400b24:	020b 0000 0000 0000 0000 0000 01ee 0000     ................
20400b34:	020b 0000 0000 0000 01ee 0000 0000 0000     ................
20400b44:	01b8 0000                                   ....

20400b48 <impure_data>:
20400b48:	0000 0000 0e34 2040 0e9c 2040 0f04 2040     ....4.@ ..@ ..@ 
	...
20400bf0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400c00:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400f70 <__atexit_recursive_mutex>:
20400f70:	1000 2040                                   ..@ 
